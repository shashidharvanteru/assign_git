
ANS1) Create a local .gitignore. If you create a file in your repository named .gitignore, Git uses it to determine which files and directories to ignore, before you make  commit. A .gitignore file should be committed into your repository, in order to share the ignore rules with any other users that clone the repository.
.project and .classpath files should be included for java project

ANS2)Fast-Forward in git means that a pull/rebase was able to update directly to the new revision without having to perform any merges.
For instance, if you create a new branch from master named "mydev" and you make several commits, as long as nobody else committed to master while you were working you could do a "fast-forward merge" which basically means that git simply moves the HEAD pointer for that branch to the latest commit without doing any hard work.
ANS 3)
Using branches help you organize the workflow more efficiently and rather effortlessly.
Let’s say, you are building a software for a company in a team of 5 people. It would be a good idea to have a branch for each developer because usually they work on different things. And because of the way Git works, you can keep working on your branch regardless of the work that is happening in other branches
ans4)
 In a project how many remote Git repositories do you usually have?
You can have as many remotes as you want, but you can only have one remote named "origin". The remote called "origin" is not special in any way, except that it is the default remote created by Git when you clone an existing repository. You can configure a second remote, push to/pull from that remote, and setup some branches to track branches from that remote instead of origin.